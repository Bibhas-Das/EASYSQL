date :18.03.2025 quantity:40
_______________________________
INSERT INTO [table] ([field]) VALUES ([value]);

INSERT INTO [table] ([field]) VALUES ([value]), ([value]);

INSERT INTO [table] DEFAULT VALUES;

INSERT INTO [table] ([field]) SELECT [field] FROM [table] WHERE [condition];

INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = VALUES([field]);

INSERT IGNORE INTO [table] ([field]) VALUES ([value]);

REPLACE INTO [table] ([field]) VALUES ([value]);

INSERT INTO [table] ([field]) VALUES ([value]) RETURNING [field];

INSERT INTO [table] ([field]) VALUES ([value]) PRIMARY KEY ([field]);

INSERT INTO [table] ([field]) VALUES ([value]) BEFORE INSERT;

INSERT INTO [table] PARTITION ([partition_name]) VALUES ([value]);

INSERT INTO [temp_table] ([field]) VALUES ([value]);

INSERT INTO [table] ([json_column]) VALUES ('{"key": "value"}');

INSERT INTO [table] ([xml_column]) VALUES ('value');

INSERT INTO [table] ([field]) VALUES (UPPER([value]));

INSERT INTO [table] ([date_column]) VALUES (CURRENT_DATE);

INSERT INTO [table] ([field]) VALUES (CASE WHEN [condition] THEN [value] ELSE [value] END);

INSERT INTO [table] ([field]) SELECT ROW_NUMBER() OVER (PARTITION BY [field] ORDER BY [field]);

INSERT INTO [table] SELECT [field] FROM [source_table];

INSERT INTO [table] ([field]) VALUES ([value]), ([value]);

WITH [alias] AS (SELECT [field] FROM [table]) INSERT INTO [table] ([field]) SELECT [field] FROM [alias];

INSERT INTO [table] ([field]) VALUES ([value]) ON CONFLICT ([field]) DO UPDATE SET [field] = [value];

MERGE INTO [table] USING [source_table] ON [condition] WHEN MATCHED THEN UPDATE SET [field] = [value] WHEN NOT MATCHED THEN INSERT ([field]) VALUES ([value]);

INSERT DELAYED INTO [table] ([field]) VALUES ([value]);

BEGIN TRANSACTION; INSERT INTO [table] ([field]) VALUES ([value]); COMMIT;

INSERT INTO [table] ([field]) VALUES ([value]) USE INDEX ([index_name]);

INSERT INTO [table] ([field]) VALUES ([value]) PARALLEL;

INSERT IGNORE INTO [table] ([field]) VALUES (CASE WHEN [condition] THEN [value] ELSE [value] END);

INSERT IGNORE INTO [table] ([field]) VALUES (UPPER([value]));

INSERT IGNORE INTO [table] ([field]) VALUES ('<node>value</node>');

INSERT IGNORE INTO [table] ([field]) VALUES ('{"key": "value"}');

INSERT IGNORE INTO [table] ([field]) SELECT [field] FROM [table] WHERE [condition];

INSERT IGNORE INTO [table] ([field]) SELECT ROW_NUMBER() OVER (ORDER BY [field]) FROM [table];

REPLACE INTO [table] ([field]) VALUES (CASE WHEN [condition] THEN [value] ELSE [value] END);

REPLACE INTO [table] ([field]) VALUES (UPPER([value]));
REPLACE INTO [table] ([field]) VALUES ('{"key": "value"}');

REPLACE INTO [table] ([field]) SELECT [field] FROM [table] WHERE [condition];

INSERT INTO [table] ([field]) VALUES ([value]) CHECK ([condition]);

INSERT INTO [table] ([field]) VALUES ([value]) UNIQUE ([field]);

INSERT INTO [table] ([field]) VALUES ([value]) FOREIGN KEY ([field]) REFERENCES [table]([field]);

INSERT INTO [table] ([field]) VALUES ([value]) INSTEAD OF INSERT;

INSERT INTO [table] ([field]) VALUES ([value]) AFTER INSERT;

date :18.03.2025 quantity:40
_______________________________
date:19.03.25 q=17

INSERT INTO [table] ([field]) VALUES (LOWER([value]));

INSERT INTO [table] ([field]) VALUES (TRIM([value]));

INSERT INTO [table] ([field]) VALUES (CONCAT([value], [value]));

INSERT INTO [table] ([field]) VALUES (UPPER(TRIM([value])));

INSERT INTO [table] ([field]) VALUES (UPPER(CONCAT([value], [value])));

INSERT INTO [table] ([field]) VALUES (LOWER(TRIM([value])));

INSERT INTO [table] ([field]) VALUES (LOWER(CONCAT([value], [value])));

INSERT INTO [table] ([field]) VALUES (TRIM(CONCAT([value], [value])));

INSERT INTO [table] ([field]) VALUES (UPPER(LOWER(TRIM([value]))));

INSERT INTO [table] ([field]) VALUES (UPPER(LOWER(CONCAT([value], [value]))));

INSERT INTO [table] ([field]) VALUES (UPPER(TRIM(CONCAT([value], [value]))));

INSERT INTO [table] ([field]) VALUES (LOWER(TRIM(CONCAT([value], [value]))));

INSERT INTO [table] ([field]) VALUES (UPPER(LOWER(TRIM(CONCAT([value], [value])))));

INSERT INTO [table] ([field]) SELECT LEAD([field], 1) OVER (ORDER BY [field]) FROM [table];

INSERT INTO [table] ([field]) SELECT LAG([field], 1) OVER (ORDER BY [field]) FROM [table];

INSERT INTO [table] ([field]) SELECT RANK() OVER (ORDER BY [field]) FROM [table];

INSERT INTO [table] ([field]) SELECT ROW_NUMBER() OVER (ORDER BY [field]) FROM [table];

__________date:21.03.25-22.03.2025______
q=47

INSERT INTO [table] ([field]) SELECT [field] FROM [table];
INSERT INTO [table] ([field]) SELECT DISTINCT [field] FROM [table];
INSERT INTO [table] ([field]) SELECT UPPER([field]) FROM [table];
INSERT INTO [table] ([field]) SELECT CURRENT_DATE FROM [table];
INSERT INTO [table] ([field]) SELECT CASE WHEN [condition] THEN [value] ELSE [value] END FROM [table];
INSERT INTO [table] ([field]) SELECT ROW_NUMBER() OVER (ORDER BY [field]) FROM [table];
INSERT INTO [table] ([field]) SELECT [field] FROM [table];
INSERT INTO [table] ([field]) SELECT [value];
INSERT INTO [table] ([field]) SELECT [field] FROM [table] WHERE [field];
INSERT INTO [table] ([field]) SELECT [value] WHERE [field];
INSERT INTO [table] ([field]) SELECT [alias].[field] FROM [table] AS [alias];
INSERT INTO [table] ([field]) SELECT [alias].[field] FROM [table] AS [alias] WHERE [alias].[field];
INSERT INTO [table] ([field]) SELECT [value] FROM DUAL;
INSERT INTO [table] ([field]) VALUES ([value]) RETURNING *;
INSERT INTO [table] ([field]) VALUES (UPPER([value])) RETURNING [field];
INSERT INTO [table] ([field]) SELECT ROW_NUMBER() OVER (ORDER BY [field]) FROM [table] RETURNING [field];
INSERT INTO [table] ([field]) VALUES (CASE WHEN [condition] THEN [value] ELSE [value] END);
INSERT INTO [table] ([field]) VALUES (NULLIF([field], [value]));
INSERT INTO [table] ([field]) VALUES (CAST([field] AS [type]));
INSERT INTO [table] ([field]) VALUES (COALESCE([field], [default_value]));
INSERT INTO [table] ([field]) VALUES (UPPER([value])), (LOWER([value]));
INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = UPPER([field]);
INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = TRIM([field]);
INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = LOWER([field]);
INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = CONCAT([field], '_suffix');
INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = SUBSTRING([field], 1, 5);
INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = LENGTH([field]);
INSERT INTO [table] ([field]) VALUES ([value]) ON DUPLICATE KEY UPDATE [field] = UPPER(TRIM([field]));
INSERT INTO [table] ([field]) SELECT [field] FROM [table] WHERE [field] = [condition];
INSERT INTO [table] ([field]) SELECT UPPER([field]) FROM [table] WHERE [field] = [condition];
INSERT INTO [table] ([field]) SELECT DISTINCT [field] FROM [table] WHERE [field] = [condition];
INSERT INTO [table] ([field]) SELECT [field] FROM [table];
INSERT INTO [table] ([field]) SELECT DISTINCT [field] FROM [table];
INSERT INTO [table] ([field]) SELECT UPPER([field]) FROM [table];
INSERT INTO [table] ([field]) SELECT ROW_NUMBER() OVER (ORDER BY [field]) FROM [table];
INSERT INTO [table] ([field]) VALUES (NULL);
INSERT INTO [table] ([field]) VALUES (TRIM([value]));
INSERT INTO [table] ([field]) VALUES (LOWER([value]));
INSERT INTO [table] ([field]) VALUES ([value]) FOREIGN KEY ([field]) REFERENCES [table]([field]);
INSERT INTO [table] ([field]) VALUES ([value]) UNIQUE ([field]);
INSERT INTO [table] ([field]) VALUES ([value]) CHECK ([condition]);
INSERT INTO [table] ([field]) VALUES ([value]) PRIMARY KEY ([field]) UNIQUE ([field]) CHECK ([condition]);
INSERT IGNORE INTO [table] ([field]) VALUES (UPPER([value]));
INSERT IGNORE INTO [table] ([field]) VALUES (LOWER([value]));
INSERT IGNORE INTO [table] ([field]) VALUES (TRIM([value]));
INSERT IGNORE INTO [table] ([field]) VALUES (LENGTH([value]));
INSERT IGNORE INTO [table] ([field]) VALUES (UPPER(TRIM([value])));
INSERT IGNORE INTO [table] ([field]) VALUES (SUBSTRING([value], 1, 5));
INSERT IGNORE INTO [table] ([field]) VALUES (REPLACE([value], 'old', 'new'));
____________________________
________DROP_______________
DROP DATABASE [database_name];
DROP DATABASE IF EXISTS [database_name];
DROP TABLE IF EXISTS [table];
DROP TABLE IF EXISTS [table];
DROP VIEW [view_name];
DROP VIEW IF EXISTS [field];
DROP INDEX IF EXISTS [index_name] ON [table];
DROP INDEX [index_name] ON [table];


_____date function_____
### 1. Insert with CURRENT_DATE
INSERT INTO [table] ([date_column]) VALUES (CURRENT_DATE);

#### 2. Insert with EXTRACT(YEAR FROM [date_field])
INSERT INTO [table] ([date_column]) VALUES (EXTRACT(YEAR FROM [date_field]));

#### 3. Insert with DATE_ADD([date_field], INTERVAL [number] DAY)
INSERT INTO [table] ([date_column]) VALUES (DATE_ADD([date_field], INTERVAL [number] DAY));

#### 4. Insert with Combined Date Functions
INSERT INTO [table] ([date_column]) VALUES (DATE_ADD(CURRENT_DATE, INTERVAL [number] DAY));

INSERT INTO [table] ([field]) VALUES (CURRENT_DATE), (DATE_ADD(CURRENT_DATE, INTERVAL 1 DAY));

INSERT INTO [table] ([field]) SELECT CURRENT_DATE FROM [table] WHERE [field] = [condition];